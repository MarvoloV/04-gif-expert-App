{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExepertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAEaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAWA,OACI,sBAAMC,SARU,SAACC,GACjBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAO,IACzBR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAkBO,OACpCN,EAAc,MAIlB,SACQ,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAZzB,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,a,QCHlBG,EAAc,SAAC,GAAmB,EAAlBC,GAAmB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAClC,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCJHK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbN,EADa,iDACiCO,UAAUF,GAD3C,+DAEDG,MAAMR,GAFL,cAEbS,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAMD,EAAKE,KAAI,SAAAC,GACjB,MAAM,CACFhB,GAAIgB,EAAIhB,GACRC,MAAMe,EAAIf,MACVC,IAAIc,EAAIC,OAAOC,iBAAiBhB,QARrB,kBAWZY,GAXY,4CAAH,sDCEPK,EAAU,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SACrB,ECDwB,SAACA,GACrB,MAA0BrB,mBAAS,CAC/B2B,KAAK,GACLO,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAaA,OATAC,qBAAW,WACPjB,EAAQC,GACHiB,MAAK,SAAAC,GACFH,EAAS,CACLT,KAAKY,EACLL,SAAQ,SAGtB,CAACb,IACIc,EDbiBK,CAAanB,GAA7BU,EAAZ,EAAOJ,KAAYO,EAAnB,EAAmBA,QACnB,OACI,qCAEI,mCAAMb,EAAN,OACCa,GAAW,mBAAGjB,UAAU,oCAAb,qBACX,qBAAKA,UAAU,YAAf,SAEWc,EAAOF,KAAI,SAACC,GAAD,OACT,cAAC,EAAD,eAEUA,GADCA,EAAIhB,aEQ1B2B,EAnBO,WAClB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KACA,OACI,qCACI,+CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQ2C,EAAWb,KAAI,SAAAR,GAAQ,OACvB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCV7BsB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b24bc34c.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport PropTypes from 'prop-types'\nexport const AddCategory = ({setCategories}) => {\n    const [inputValue, setInputValue] = useState('');\n    const handleInputChange= (e)=>{      \n        setInputValue(e.target.value)\n    }\n    const handleSubmit= (e)=>{\n        e.preventDefault();\n        if (inputValue.trim().length>2) {\n            setCategories(cats =>[inputValue,...cats]);    \n            setInputValue('');\n        }\n    }\n    return (\n        <form onSubmit={handleSubmit}>\n                <input type=\"text\" value={inputValue} onChange={handleInputChange}/>\n        </form>\n    )\n   \n}\nAddCategory.propTypes={\n    setCategories : PropTypes.func.isRequired\n}\n//<button onClick={handleAdd} >Agregar</button>     ","import React from 'react';\n\nexport const GifGridItem = ({id,title,url}) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","\n\nexport const getGifs = async(category) =>{\n    const url=`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=ou55SzD5Wfsu3NacA5dmDFL0r9V3ZGc1`;\n    const resp= await fetch(url);\n    const {data} = await resp.json();\n    const gifs= data.map(img=>{\n        return{\n            id: img.id,\n            title:img.title,\n            url:img.images.downsized_medium.url \n        }\n    })\n    return gifs;\n}","import React from 'react'\n//,{useEffect,useState}\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nexport const GifGrid = ({category}) => {\n    const {data:images,loading}=useFetchGifs(category);\n    return (\n        <>\n        \n            <h3> {category} </h3>    \n            {loading && <p className=\"animate__animated animate__flash \">Loading</p> }\n            {<div className=\"card-grid\">\n                    {\n                        images.map((img)=>                  \n                        ( <GifGridItem \n                                key={img.id} \n                                {...img}\n                            /> )\n                        )\n                    }\n            </div>}\n        </>    \n    )\n}\n","import { useState,useEffect } from \"react\";\nimport { getGifs } from '../helpers/getGifs';\n\n\nexport const useFetchGifs = (category) => {\n        const [state, setState] = useState({\n            data:[],\n            loading:true\n        });\n        useEffect( ()=>{\n            getGifs(category)\n                .then(imgs=>{\n                    setState({\n                        data:imgs,\n                        loading:false,\n                    });\n                });\n        },[category])\n        return state //{data[],loading:true}\n\n}\n","import React,{Fragment, useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExepertApp = ()=>{\n    const [categories, setCategories] = useState(['One Punch']);\n    return (\n        <> \n            <h2>GifExepertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr/>\n            <ol>\n                {\n                    categories.map(category=> \n                    <GifGrid \n                        key={category} \n                        category={category} \n                    />\n                )}\n            </ol>\n        </>\n    )\n}\nexport default GifExepertApp\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExepertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExepertApp></GifExepertApp>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}